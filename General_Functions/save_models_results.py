''' Author: Alex Cohen DambrÃ³s Lopes 

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Code used to save the data and results of machine learning models
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

'''

# ============= Imports =============

import os
import joblib
import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

 # ============= Save Model =============

def save_model(clf, name_model, suffix):
    
    """
    Description:
        Saves a trained model to disk.

    Parameters:
        clf : object
            Trained model object to be saved.
        name_model: str
            Model name.
        suffix: str
            "_local" or "_global"

    Return:
        None.
    """

    # Path
    path = os.path.join(os.getcwd(), f'Saved_models\\{name_model}')

    # Create the directory
    os.makedirs(path, exist_ok=True)

    # Saving
    file_name = os.path.join(path, f'{name_model+suffix}.pkl')

    if os.path.isfile(file_name):
        # If the file already exists, remove the old file
        os.remove(file_name)

    joblib.dump(clf, file_name)
    
    
# ============= Saving the Results =============

def saving_the_results(dict_result, y_test, y_pred):
    
    """
    Description:
        Saves the results of a model in an Excel file.

    Parameters:
        dict_result : dict
            Results dictionary to be saved in Excel file. The dictionary keys
            will be the columns of the Excel file.
        y_test: 
            Class labels corresponding to the test data.
        y_pred:
            Is a variable that is used to store the predictions (predictions) generated by the model.

    Return:
        None.
    """

    if not dict_result:
        raise ValueError("The dictionary of results is empty.")
    
    for key, value in dict_result.items():
        name_parts = key.rsplit("_", 1)
        name = name_parts[0]
         
        # Path
        path = os.path.join(os.getcwd(), f'Model_Results\\{name}')

        # Create the directory
        os.makedirs(path, exist_ok=True)

        # Saving
        file_path = os.path.join(path, f'Result_{key}.xlsx')

        if os.path.isfile(file_path):
            os.remove(file_path)
            
        df_results = pd.DataFrame.from_dict({key: value}, orient="index")
        
        with pd.ExcelWriter(file_path) as writer:
            df_results.to_excel(writer, index=True)
            
        # Saving confusion matrix
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        im = ax.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
        ax.set(xticks=np.arange(cm.shape[1]),
            yticks=np.arange(cm.shape[0]),
            xticklabels= ['CONFIRMED', 'FALSE POSITIVE'], yticklabels=['CONFIRMED', 'FALSE POSITIVE'],
            ylabel='True label',
            xlabel='Predicted label')
        plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
                rotation_mode="anchor")
        for i in range(cm.shape[0]):
            for j in range(cm.shape[1]):
                ax.text(j, i, format(cm[i, j], 'd'),
                        ha="center", va="center",
                        color="white" if cm[i, j] > cm.max() / 2. else "black")
        fig.tight_layout()

        img_file_path = os.path.join(path, f'ConfusionMatrix_{key}.png')
        plt.savefig(img_file_path)
        plt.close(fig)